/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.3.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    object      T;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 0 0 1 0 0 0];



internalField   uniform 305.15;

boundaryField
{
     inlet
    {
        type            fixedValue;
        value 		 uniform 305.15; //Tin_subcooled of 5 K
       //  type            zeroGradient;

    }

    outlet
    {
        type            zeroGradient;
    }
    
    heater
    {
        type            externalWallHeatFluxTemperature;
        kappaMethod     lookup;
        kappa           kappa;
        mode            flux;
        q               #codeStream
	{
            code
            #{
                const IOdictionary& d = static_cast<const IOdictionary&>
                (
                    dict.parent().parent()
                );
                const fvMesh& mesh = refCast<const fvMesh>(d.db());
                const label patchID(mesh.boundaryMesh().findPatchID("heater"));
                const fvPatch& boundaryPatch = mesh.boundary()[patchID];
                const vectorField& Cf = boundaryPatch.Cf();
                scalarField fld(Cf.size(), scalar(0));

                //- Compute useful stuff
                const scalar qw=50e3;
                const scalar L1=0.0002501;
                const scalar L2 =0.01;

                forAll(Cf, faceI)
                {

                    const scalar x = Cf[faceI].x();
		    if (x>=L1 && x<=L2){
                    fld[faceI] = scalar(qw);}
                }

                fld.writeEntry("", os);
            #};

            //- Optional:
            codeInclude
            #{
                #include "fvCFD.H"
            #};

            //- Optional:
            codeOptions
            #{
                -I$(LIB_SRC)/finiteVolume/lnInclude \
                -I$(LIB_SRC)/meshTools/lnInclude
            #};
        };
        value           $internalField;
    }


   
    heater_adiab
    {

       
        type            externalWallHeatFluxTemperature;
        kappaMethod     lookup;
        kappa           kappa;
        mode            flux;
        q               0;
        value           $internalField;
    }
    topWall
    {
        type           zeroGradient;

    }
    "pin.*"
    {
        //type            zeroGradient;
        type            externalWallHeatFluxTemperature;
        kappaMethod     lookup;
        kappa           kappa;
        mode            flux;
        q               50000;
        value           $internalField;

    }
    "Pin.*"
    {
        //type            zeroGradient;
        type            externalWallHeatFluxTemperature;
        kappaMethod     lookup;
        kappa           kappa;
        mode            flux;
        q               0;
        value           $internalField;

    }

    "(rightWall|leftWall)"
    {
        type           cyclic;
    }


}


// ************************************************************************* //
