/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  6
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2;
    format      ascii;
    class       dictionary;
    object      snappyHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
#include "../simSetup"
convertToMeters 1;
// Which of the steps to run
castellatedMesh true;
snap            true;
addLayers       true;


// Geometry. Definition of all surfaces. All surfaces are of class
// searchableSurface.
// Surfaces are used
// - to specify refinement for any mesh cell intersecting it
// - to specify refinement for any mesh cell inside/outside/near
// - to 'snap' the mesh boundary to the surface

geometry
{

  Pin.0_2
    {
        type searchableCylinder;
        point1 (#calc "$Dx*2" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*2" #calc "$Dy/2" 1);
        radius $Rpin;
    }

    pin.0_3
    {
        type searchableCylinder;
        point1 (#calc "$Dx*3" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*3"  #calc "$Dy/2" 1);
        radius $rpin;
    }

    pin.0_4
    {
        type searchableCylinder;
        point1 (#calc "$Dx*4" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*4"  #calc "$Dy/2" 1);
        radius $rpin;
    }

    pin.0_5
    {
        type searchableCylinder;
        point1 (#calc "$Dx*5" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*5" #calc "$Dy/2" 1);
        radius $rpin;
    }

    pin.0_6
    {
        type searchableCylinder;
        point1 (#calc "$Dx*6" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*6" #calc "$Dy/2" 1);
        radius $rpin;
    }

        pin.0_7
    {
        type searchableCylinder;
        point1 (#calc "$Dx*7" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*7" #calc "$Dy/2" 1);
        radius $rpin;
    }

    pin.0_8
    {
        type searchableCylinder;
        point1 (#calc "$Dx*8" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*8"  #calc "$Dy/2" 1);
        radius $rpin;
    }

    pin.0_9
    {
        type searchableCylinder;
        point1 (#calc "$Dx*9" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*9"  #calc "$Dy/2" 1);
        radius $rpin;
    }

    pin.0_10
    {
        type searchableCylinder;
        point1 (#calc "$Dx*10" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*10" #calc "$Dy/2" 1);
        radius $rpin;
    }
    /***********************************************/
     pin.0_11
    {
        type searchableCylinder;
        point1 (#calc "$Dx*11" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*11" #calc "$Dy/2" 1);
        radius $rpin;
    }
    
    pin.0_12
    {
        type searchableCylinder;
        point1 (#calc "$Dx*12" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*12"  #calc "$Dy/2" 1);
        radius $rpin;
    }

    pin.0_13
    {
        type searchableCylinder;
        point1 (#calc "$Dx*13" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*13"  #calc "$Dy/2" 1);
        radius $rpin;
    }

    pin.0_14
    {
        type searchableCylinder;
        point1 (#calc "$Dx*14" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*14" #calc "$Dy/2" 1);
        radius $rpin;
    }

    pin.0_15
    {
        type searchableCylinder;
        point1 (#calc "$Dx*15" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*15" #calc "$Dy/2" 1);
        radius $rpin;
    }

        pin.0_16
    {
        type searchableCylinder;
        point1 (#calc "$Dx*16" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*16" #calc "$Dy/2" 1);
        radius $rpin;
    }

    pin.0_17
    {
        type searchableCylinder;
        point1 (#calc "$Dx*17" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*17"  #calc "$Dy/2" 1);
        radius $rpin;
    }

    pin.0_18
    {
        type searchableCylinder;
        point1 (#calc "$Dx*18" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*18"  #calc "$Dy/2" 1);
        radius $rpin;
    }

    pin.0_19
    {
        type searchableCylinder;
        point1 (#calc "$Dx*19" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*19" #calc "$Dy/2" 1);
        radius $rpin;
    }
    /***********************************************/
     pin.0_20
    {
        type searchableCylinder;
        point1 (#calc "$Dx*20" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*20" #calc "$Dy/2" 1);
        radius $rpin;
    }

    

         pin.0_21
    {
        type searchableCylinder;
        point1 (#calc "$Dx*21" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*21" #calc "$Dy/2" 1);
        radius $rpin;
    }
    
    pin.0_22
    {
        type searchableCylinder;
        point1 (#calc "$Dx*22" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*22" #calc "$Dy/2" 1);
        radius $rpin;
    }
    
    pin.0_23
    {
        type searchableCylinder;
        point1 (#calc "$Dx*23" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*23" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_24
    {
        type searchableCylinder;
        point1 (#calc "$Dx*24" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*24" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_25
    {
        type searchableCylinder;
        point1 (#calc "$Dx*25" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*25" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_26
    {
        type searchableCylinder;
        point1 (#calc "$Dx*26" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*26" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_27
    {
        type searchableCylinder;
        point1 (#calc "$Dx*27" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*27" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_28
    {
        type searchableCylinder;
        point1 (#calc "$Dx*28" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*28" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_29
    {
        type searchableCylinder;
        point1 (#calc "$Dx*29" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*29" #calc "$Dy/2" 1);
        radius $rpin;
    }
   /*************************************/
      pin.0_30
    {
        type searchableCylinder;
        point1 (#calc "$Dx*30" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*30" #calc "$Dy/2" 1);
        radius $rpin;
    }
      
        pin.0_31
    {
        type searchableCylinder;
        point1 (#calc "$Dx*31" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*31" #calc "$Dy/2" 1);
        radius $rpin;
    }
    
    pin.0_32
    {
        type searchableCylinder;
        point1 (#calc "$Dx*32" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*32" #calc "$Dy/2" 1);
        radius $rpin;
    }
    
    pin.0_33
    {
        type searchableCylinder;
        point1 (#calc "$Dx*33" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*33" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_34
    {
        type searchableCylinder;
        point1 (#calc "$Dx*34" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*34" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_35
    {
        type searchableCylinder;
        point1 (#calc "$Dx*35" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*35" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_36
    {
        type searchableCylinder;
        point1 (#calc "$Dx*36" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*36" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_37
    {
        type searchableCylinder;
        point1 (#calc "$Dx*37" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*37" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_38
    {
        type searchableCylinder;
        point1 (#calc "$Dx*38" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*38" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_39
    {
        type searchableCylinder;
        point1 (#calc "$Dx*39" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*39" #calc "$Dy/2" 1);
        radius $rpin;
    }
/*************************************/
     pin.0_40
    {
        type searchableCylinder;
        point1 (#calc "$Dx*40" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*40" #calc "$Dy/2" 1);
        radius $rpin;
    }
        pin.0_41
    {
        type searchableCylinder;
        point1 (#calc "$Dx*41" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*41" #calc "$Dy/2" 1);
        radius $rpin;
    }
    
    pin.0_42
    {
        type searchableCylinder;
        point1 (#calc "$Dx*42" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*42" #calc "$Dy/2" 1);
        radius $rpin;
    }
    
    pin.0_43
    {
        type searchableCylinder;
        point1 (#calc "$Dx*43" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*43" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_44
    {
        type searchableCylinder;
        point1 (#calc "$Dx*44" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*44" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_45
    {
        type searchableCylinder;
        point1 (#calc "$Dx*45" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*45" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_46
    {
        type searchableCylinder;
        point1 (#calc "$Dx*46" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*46" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_47
    {
        type searchableCylinder;
        point1 (#calc "$Dx*47" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*47" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_48
    {
        type searchableCylinder;
        point1 (#calc "$Dx*48" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*48" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_49
    {
        type searchableCylinder;
        point1 (#calc "$Dx*49" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*49" #calc "$Dy/2" 1);
        radius $rpin;
    }
/*************************************/
     pin.0_50
    {
        type searchableCylinder;
        point1 (#calc "$Dx*50" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*50" #calc "$Dy/2" 1);
        radius $rpin;
    }
   
     pin.0_51
    {
        type searchableCylinder;
        point1 (#calc "$Dx*51" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*51" #calc "$Dy/2" 1);
        radius $rpin;
    }
    
    pin.0_52
    {
        type searchableCylinder;
        point1 (#calc "$Dx*52" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*52" #calc "$Dy/2" 1);
        radius $rpin;
    }
    
    pin.0_53
    {
        type searchableCylinder;
        point1 (#calc "$Dx*53" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*53" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_54
    {
        type searchableCylinder;
        point1 (#calc "$Dx*54" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*54" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_55
    {
        type searchableCylinder;
        point1 (#calc "$Dx*55" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*55" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_56
    {
        type searchableCylinder;
        point1 (#calc "$Dx*56" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*56" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_57
    {
        type searchableCylinder;
        point1 (#calc "$Dx*57" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*57" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_58
    {
        type searchableCylinder;
        point1 (#calc "$Dx*58" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*58" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_59
    {
        type searchableCylinder;
        point1 (#calc "$Dx*59" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*59" #calc "$Dy/2" 1);
        radius $rpin;
    }
 /*************************************/
 
    pin.0_60
    {
        type searchableCylinder;
        point1 (#calc "$Dx*60" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*60" #calc "$Dy/2" 1);
        radius $rpin;
    }
   
     pin.0_61
    {
        type searchableCylinder;
        point1 (#calc "$Dx*61" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*61" #calc "$Dy/2" 1);
        radius $rpin;
    }
    
    pin.0_62
    {
        type searchableCylinder;
        point1 (#calc "$Dx*62" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*62" #calc "$Dy/2" 1);
        radius $rpin;
    }
    
    pin.0_63
    {
        type searchableCylinder;
        point1 (#calc "$Dx*63" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*63" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_64
    {
        type searchableCylinder;
        point1 (#calc "$Dx*64" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*64" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_65
    {
        type searchableCylinder;
        point1 (#calc "$Dx*65" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*65" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_66
    {
        type searchableCylinder;
        point1 (#calc "$Dx*66" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*66" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_67
    {
        type searchableCylinder;
        point1 (#calc "$Dx*67" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*67" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_68
    {
        type searchableCylinder;
        point1 (#calc "$Dx*68" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*68" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_69
    {
        type searchableCylinder;
        point1 (#calc "$Dx*69" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*69" #calc "$Dy/2" 1);
        radius $rpin;
    }

 /*************************************/
    pin.0_70
    {
        type searchableCylinder;
        point1 (#calc "$Dx*70" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*70" #calc "$Dy/2" 1);
        radius $rpin;
    }
   
     pin.0_71
    {
        type searchableCylinder;
        point1 (#calc "$Dx*71" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*71" #calc "$Dy/2" 1);
        radius $rpin;
    }
    
    pin.0_72
    {
        type searchableCylinder;
        point1 (#calc "$Dx*72" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*72" #calc "$Dy/2" 1);
        radius $rpin;
    }
    
    pin.0_73
    {
        type searchableCylinder;
        point1 (#calc "$Dx*73" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*73" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_74
    {
        type searchableCylinder;
        point1 (#calc "$Dx*74" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*74" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_75
    {
        type searchableCylinder;
        point1 (#calc "$Dx*75" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*75" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_76
    {
        type searchableCylinder;
        point1 (#calc "$Dx*76" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*76" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_77
    {
        type searchableCylinder;
        point1 (#calc "$Dx*77" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*77" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_78
    {
        type searchableCylinder;
        point1 (#calc "$Dx*78" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*78" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_79
    {
        type searchableCylinder;
        point1 (#calc "$Dx*79" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*79" #calc "$Dy/2" 1);
        radius $rpin;
    }

  /*************************************/
     pin.0_80
    {
        type searchableCylinder;
        point1 (#calc "$Dx*80" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*80" #calc "$Dy/2" 1);
        radius $rpin;
    }
   
     pin.0_81
    {
        type searchableCylinder;
        point1 (#calc "$Dx*81" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*81" #calc "$Dy/2" 1);
        radius $rpin;
    }
    
    pin.0_82
    {
        type searchableCylinder;
        point1 (#calc "$Dx*82" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*82" #calc "$Dy/2" 1);
        radius $rpin;
    }
    
    pin.0_83
    {
        type searchableCylinder;
        point1 (#calc "$Dx*83" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*83" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_84
    {
        type searchableCylinder;
        point1 (#calc "$Dx*84" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*84" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_85
    {
        type searchableCylinder;
        point1 (#calc "$Dx*85" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*85" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_86
    {
        type searchableCylinder;
        point1 (#calc "$Dx*86" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*86" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_87
    {
        type searchableCylinder;
        point1 (#calc "$Dx*87" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*87" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_88
    {
        type searchableCylinder;
        point1 (#calc "$Dx*88" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*88" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_89
    {
        type searchableCylinder;
        point1 (#calc "$Dx*89" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*89" #calc "$Dy/2" 1);
        radius $rpin;
    }

  
   /*************************************/
   
      pin.0_90
    {
        type searchableCylinder;
        point1 (#calc "$Dx*90" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*90" #calc "$Dy/2" 1);
        radius $rpin;
    }
   
     pin.0_91
    {
        type searchableCylinder;
        point1 (#calc "$Dx*91" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*91" #calc "$Dy/2" 1);
        radius $rpin;
    }
    
    pin.0_92
    {
        type searchableCylinder;
        point1 (#calc "$Dx*92" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*92" #calc "$Dy/2" 1);
        radius $rpin;
    }
    
    pin.0_93
    {
        type searchableCylinder;
        point1 (#calc "$Dx*93" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*93" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_94
    {
        type searchableCylinder;
        point1 (#calc "$Dx*94" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*94" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_95
    {
        type searchableCylinder;
        point1 (#calc "$Dx*95" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*95" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_96
    {
        type searchableCylinder;
        point1 (#calc "$Dx*96" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*96" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_97
    {
        type searchableCylinder;
        point1 (#calc "$Dx*97" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*97" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_98
    {
        type searchableCylinder;
        point1 (#calc "$Dx*98" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*98" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_99
    {
        type searchableCylinder;
        point1 (#calc "$Dx*99" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*99" #calc "$Dy/2" 1);
        radius $rpin;
    }

   
    /*************************************/
    
    pin.0_100
    {
        type searchableCylinder;
        point1 (#calc "$Dx*100" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*100" #calc "$Dy/2" 1);
        radius $rpin;
    }
   
     pin.0_101
    {
        type searchableCylinder;
        point1 (#calc "$Dx*101" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*101" #calc "$Dy/2" 1);
        radius $rpin;
    }
    
    pin.0_102
    {
        type searchableCylinder;
        point1 (#calc "$Dx*102" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*102" #calc "$Dy/2" 1);
        radius $rpin;
    }
    
    pin.0_103
    {
        type searchableCylinder;
        point1 (#calc "$Dx*103" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*103" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_104
    {
        type searchableCylinder;
        point1 (#calc "$Dx*104" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*104" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_105
    {
        type searchableCylinder;
        point1 (#calc "$Dx*105" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*105" #calc "$Dy/2" 1);
        radius $rpin;
    }
    pin.0_106
    {
        type searchableCylinder;
        point1 (#calc "$Dx*106" #calc "$Dy/2" -1);
        point2 (#calc "$Dx*106" #calc "$Dy/2" 1);
        radius $rpin;
    }
   
 
 
 
     
     /*pin.1_21
    {
        type searchableCylinder;
        point1 (#calc "$Dx*21" #calc "$Dy/2+$Dy" -1);
        point2 (#calc "$Dx*21" #calc "$Dy/2+$Dy" 1);
        radius $rpin;
    }*/
    
    
};



// Settings for the castellatedMesh generation.
castellatedMeshControls
{

    // Refinement parameters
    // ~~~~~~~~~~~~~~~~~~~~~

    // If local number of cells is >= maxLocalCells on any processor
    // switches from from refinement followed by balancing
    // (current method) to (weighted) balancing before refinement.
    maxLocalCells 10000000;

    // Overall cell limit (approximately). Refinement will stop immediately
    // upon reaching this number so a refinement level might not complete.
    // Note that this is the number of cells before removing the part which
    // is not 'visible' from the keepPoint. The final number of cells might
    // actually be a lot less.
    maxGlobalCells 20000000;

    // The surface refinement loop might spend lots of iterations refining just a
    // few cells. This setting will cause refinement to stop if <= minimumRefine
    // are selected for refinement. Note: it will at least do one iteration
    // (unless the number of cells to refine is 0)
    minRefinementCells 10;

    // Allow a certain level of imbalance during refining
    // (since balancing is quite expensive)
    // Expressed as fraction of perfect balance (= overall number of cells /
    // nProcs). 0=balance always.
    maxLoadUnbalance 0.10;


    // Number of buffer layers between different levels.
    // 1 means normal 2:1 refinement restriction, larger means slower
    // refinement.
    nCellsBetweenLevels 8;  //used to be 3



    // Explicit feature edge refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies a level for any cell intersected by its edges.
    // This is a featureEdgeMesh, read from constant/triSurface for now.
    features
    (
    );



    // Surface based refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies two levels for every surface. The first is the minimum level,
    // every cell intersecting a surface gets refined up to the minimum level.
    // The second level is the maximum level. Cells that 'see' multiple
    // intersections where the intersections make an
    // angle > resolveFeatureAngle get refined up to the maximum level.

    refinementSurfaces
    {
	"pin.*"
        {
            // Surface-wise min and max refinement level
            level (0 0);

        }
        "Pin.*"
        {
            // Surface-wise min and max refinement level
            level (0 0);

        }

    }

    // Resolve sharp angles
    resolveFeatureAngle 30;


    // Region-wise refinement
    // ~~~~~~~~~~~~~~~~~~~~~~

    // Specifies refinement level for cells in relation to a surface. One of
    // three modes
    // - distance. 'levels' specifies per distance to the surface the
    //   wanted refinement level. The distances need to be specified in
    //   descending order.
    // - inside. 'levels' is only one entry and only the level is used. All
    //   cells inside the surface get refined up to the level. The surface
    //   needs to be closed for this to be possible.
    // - outside. Same but cells outside.

    refinementRegions
    {
        solid
        {
            // Surface-wise min and max refinement level
            mode inside;
            levels ((1 1));

        }
    }


    // Mesh selection
    // ~~~~~~~~~~~~~~

    // After refinement patches get added for all refinementSurfaces and
    // all cells intersecting the surfaces get put into these patches. The
    // section reachable from the locationInMesh is kept.
    // NOTE: This point should never be on a face, always inside a cell, even
    // after refinement.
    locationInMesh (1e-6 1e-6  1e-6);/*(168 -225 -26) ;*/
   /* locationsInMesh
      (
     ((0 0 0) solid)
     ((1e-6 1e-6  1e-6) fluid));
*/
    // Whether any faceZones (as specified in the refinementSurfaces)
    // are only on the boundary of corresponding cellZones or also allow
    // free-standing zone faces. Not used if there are no faceZones.
    allowFreeStandingZoneFaces true;
}



// Settings for the snapping.
snapControls
{
    //- Number of patch smoothing iterations before finding correspondence
    //  to surface
    nSmoothPatch 9;

    //- Relative distance for points to be attracted by surface feature point
    //  or edge. True distance is this factor times local
    //  maximum edge length.
    tolerance 8.0;

    //- Number of mesh displacement relaxation iterations.
    nSolveIter 30;

    //- Maximum number of snapping relaxation iterations. Should stop
    //  before upon reaching a correct mesh.
    nRelaxIter 3;

    // Feature snapping
	/*
        //- Number of feature edge snapping iterations.
        //  Leave out altogether to disable.
        nFeatureSnapIter 10;

        //- Detect (geometric only) features by sampling the surface
        //  (default=false).
        implicitFeatureSnap false;

        //- Use castellatedMeshControls::features (default = true)
        explicitFeatureSnap true;

        //- Detect points on multiple surfaces (only for explicitFeatureSnap)
        multiRegionFeatureSnap false;
	*/
}



// Settings for the layer addition.
addLayersControls
{
    // Are the thickness parameters below relative to the undistorted
    // size of the refined cell outside layer (true) or absolute sizes (false).
    relativeSizes true;

    // Per final patch (so not geometry!) the layer information
    layers
    {
        "pin.*"
        {
            nSurfaceLayers 1;
        }
        "Pin.*"
        {
            nSurfaceLayers 1;
        }


    }

    // Expansion factor for layer mesh
    expansionRatio 2;

    // Wanted thickness of final added cell layer. If multiple layers
    // is the thickness of the layer furthest away from the wall.
    // Relative to undistorted size of cell outside layer.
    // See relativeSizes parameter.
    finalLayerThickness 0.8;

    // Minimum thickness of cell layer. If for any reason layer
    // cannot be above minThickness do not add layer.
    // Relative to undistorted size of cell outside layer.
    minThickness 0.01;

    // If points get not extruded do nGrow layers of connected faces that are
    // also not grown. This helps convergence of the layer addition process
    // close to features.
    // Note: changed(corrected) w.r.t 17x! (didn't do anything in 17x)
    nGrow 0;

    // Advanced settings

    // When not to extrude surface. 0 is flat surface, 90 is when two faces
    // are perpendicular
    featureAngle 50;

    // At non-patched sides allow mesh to slip if extrusion direction makes
    // angle larger than slipFeatureAngle.
    slipFeatureAngle 30;

    // Maximum number of snapping relaxation iterations. Should stop
    // before upon reaching a correct mesh.
    nRelaxIter 10;

    // Number of smoothing iterations of surface normals
    nSmoothSurfaceNormals 1;

    // Number of smoothing iterations of interior mesh movement direction
    nSmoothNormals 3;

    // Smooth layer thickness over surface patches
    nSmoothThickness 10;

    // Stop layer growth on highly warped cells
    maxFaceThicknessRatio 0.5;

    // Reduce layer growth where ratio thickness to medial
    // distance is large
    maxThicknessToMedialRatio 0.3;

    // Angle used to pick up medial axis points
    // Note: changed(corrected) w.r.t 17x! 90 degrees corresponds to 130 in 17x.
    minMedianAxisAngle 90;


    // Create buffer region for new layer terminations
    nBufferCellsNoExtrude 0;


    // Overall max number of layer addition iterations. The mesher will exit
    // if it reaches this number of iterations; possibly with an illegal
    // mesh.
    nLayerIter 50;
}



// Generic mesh quality settings. At any undoable phase these determine
// where to undo.
meshQualityControls
{
    #include "meshQualityDict"


    //- Number of error distribution iterations    -------- ADDED FOR OF4
    nSmoothScale 4;

    //- Amount to scale back displacement at error points    -------- ADDED FOR OF4
    errorReduction 0.75;
}


// Advanced

// Write flags
writeFlags
(
    scalarLevels
    layerSets
    layerFields     // write volScalarField for layer coverage
);


// Merge tolerance. Is fraction of overall bounding box of initial mesh.
// Note: the write tolerance needs to be higher than this.
mergeTolerance 1e-6;


// ************************************************************************* //
